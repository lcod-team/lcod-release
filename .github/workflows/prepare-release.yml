name: Prepare Release Cascade

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Target semantic version (ex: 0.1.16)"
        required: true

jobs:
  update-manifest:
    name: Update VERSION in lcod-release
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.LCOD_RELEASE_TOKEN }}
    outputs:
      branch: ${{ steps.meta.outputs.branch }}
    steps:
      - name: Checkout lcod-release
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup git credentials
        run: gh auth setup-git

      - name: Configure authenticated remote
        run: |
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git
          git config --unset-all http.https://github.com/.extraheader || true

      - name: Configure git author
        run: |
          git config user.name "lcod-release-bot"
          git config user.email "releases@lcod.team"

      - name: Update VERSION file
        run: |
          echo "${{ inputs.version }}" > VERSION

      - name: Commit and push branch
        id: meta
        env:
          VERSION: ${{ inputs.version }}
        run: |
          branch="release/v${VERSION}"
          if git diff --quiet --exit-code; then
            echo "VERSION file already set to ${VERSION}, skipping commit."
            echo "branch=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          git checkout -b "$branch"
          git add VERSION
          git commit -m "chore(release): set version to ${VERSION}"
          git push "https://nicolas-albert:${GH_TOKEN}@github.com/${{ github.repository }}.git" "$branch:$branch"
          echo "branch=${branch}" >> "$GITHUB_OUTPUT"

      - name: Open pull request
        id: open_pr
        if: steps.meta.outputs.branch != ''
        env:
          GH_TOKEN: ${{ secrets.LCOD_RELEASE_TOKEN }}
          VERSION: ${{ inputs.version }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          BRANCH: ${{ steps.meta.outputs.branch }}
        run: |
          existing="$(gh pr list --head "${BRANCH}" --json number --jq '.[0].htmlUrl' || true)"
          if [[ -n "${existing}" ]]; then
            echo "- lcod-release: PR déjà ouvert (${existing})" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi

          label_args=()
          if gh label view release >/dev/null 2>&1; then
            label_args+=(--label release)
          fi

          pr_url="$(gh pr create \
            --base main \
            --head "${BRANCH}" \
            --title "chore(release): set version to ${VERSION}" \
            --body "Automated version bump to ${VERSION} triggered from ${RUN_URL}." \
            "${label_args[@]}")"

          echo "- lcod-release: ${pr_url}" >> "$GITHUB_STEP_SUMMARY"
          echo "pr_url=${pr_url}" >> "$GITHUB_OUTPUT"

      - name: Enable auto-merge (lcod-release)
        if: steps.open_pr.outputs.pr_url != ''
        env:
          GH_TOKEN: ${{ secrets.LCOD_RELEASE_TOKEN }}
          PR_URL: ${{ steps.open_pr.outputs.pr_url }}
        run: |
          gh pr merge "${PR_URL}" --auto --merge

  propagate-version:
    name: Prepare bumps in downstream repositories
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.LCOD_RELEASE_TOKEN }}
    needs: update-manifest
    strategy:
      fail-fast: false
      matrix:
        repo: ${{ fromJson('["lcod-team/lcod-kernel-rs","lcod-team/lcod-kernel-js","lcod-team/lcod-kernel-java","lcod-team/lcod-cli"]') }}
    steps:
      - name: Checkout orchestrator
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup git credentials
        run: gh auth setup-git

      - name: Configure authenticated remote
        run: |
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git
          git config --unset-all http.https://github.com/.extraheader || true

      - name: Checkout ${{ matrix.repo }}
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repo }}
          path: target
          fetch-depth: 0
          token: ${{ secrets.LCOD_RELEASE_TOKEN }}

      - name: Setup git credentials (target repo)
        working-directory: target
        run: gh auth setup-git

      - name: Configure authenticated remote (target repo)
        working-directory: target
        run: |
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ matrix.repo }}.git
          git config --unset-all http.https://github.com/.extraheader || true

      - name: Configure git author
        working-directory: target
        run: |
          git config user.name "lcod-release-bot"
          git config user.email "releases@lcod.team"

      - name: Sync version
        env:
          LCOD_VERSION: ${{ inputs.version }}
        run: |
          ./scripts/sync-version.sh target

      - name: Commit and open pull request
        id: downstream_pr
        env:
          VERSION: ${{ inputs.version }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          GH_TOKEN: ${{ secrets.LCOD_RELEASE_TOKEN }}
        run: |
          cd target
          if git status --porcelain --untracked-files=no | grep -q '.'; then
            branch="release/v${VERSION}"
            git checkout -b "${branch}"
            git add -A
            git commit -m "chore(release): bump version to ${VERSION}"
            git push "https://nicolas-albert:${GH_TOKEN}@github.com/${{ matrix.repo }}.git" "${branch}:${branch}" --force

            existing="$(gh pr list --head "${branch}" --state all --json number,url --jq '.[0].url' || true)"
            echo "existing-pr=${existing}" >> "$GITHUB_STEP_SUMMARY"
            if [[ -z "${existing}" ]]; then
              label_args=()
              if gh label view release >/dev/null 2>&1; then
                label_args+=(--label release)
              fi

              pr_url="$(gh pr create \
                --base main \
                --head "${branch}" \
                --title "chore(release): bump version to ${VERSION}" \
                --body "Automated bump to ${VERSION} triggered from ${RUN_URL} via lcod-release." \
                "${label_args[@]}")"
            else
              pr_url="${existing}"
            fi

            echo "- ${{ matrix.repo }}: ${pr_url}" >> "$GITHUB_STEP_SUMMARY"
            echo "pr_url=${pr_url}" >> "$GITHUB_OUTPUT"
          else
            echo "- ${{ matrix.repo }}: aucune modification nécessaire" >> "$GITHUB_STEP_SUMMARY"
            echo "pr_url=" >> "$GITHUB_OUTPUT"
          fi

      - name: Enable auto-merge (target repo)
        if: steps.downstream_pr.outputs.pr_url != ''
        env:
          GH_TOKEN: ${{ secrets.LCOD_RELEASE_TOKEN }}
          PR_URL: ${{ steps.downstream_pr.outputs.pr_url }}
        run: |
          gh pr merge "${PR_URL}" --auto --merge
